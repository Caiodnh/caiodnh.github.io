@article{Mog89,
title = {Notions of computation and monads},
journal = {Information and Computation},
volume = {93},
number = {1},
pages = {55-92},
year = {1991},
note = {Selections from 1989 IEEE Symposium on Logic in Computer Science},
issn = {0890-5401},
doi = {https://doi.org/10.1016/0890-5401(91)90052-4},
url = {https://www.sciencedirect.com/science/article/pii/0890540191900524},
author = {Eugenio Moggi},
abstract = {The λ-calculus is considered a useful mathematical tool in the study of programming languages, since programs can be identified with λ-terms. However, if one goes further and uses βη-conversion to prove equivalence of programs, then a gross simplification is introduced (programs are identified with total functions from values to values) that may jeopardise the applicability of theoretical results. In this paper we introduce calculi, based on a categorical semantics for computations, that provide a correct basis for proving equivalence of programs for a wide range of notions of computation.}
}

@inproceedings{Wad90,
author = {Wadler, Philip},
title = {Comprehending Monads},
year = {1990},
isbn = {089791368X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/91556.91592},
doi = {10.1145/91556.91592},
abstract = {Category theorists invented monads in the 1960's to concisely express certain aspects
of universal algebra. Functional programmers invented list comprehensions in the 1970's
to concisely express certain programs involving lists. This paper shows how list comprehensions
may be generalised to an arbitrary monad, and how the resulting programming feature
can concisely express in a pure functional language some programs that manipulate
state, handle exceptions, parse text, or invoke continuations. A new solution to the
old problem of destructive array update is also presented. No knowledge of category
theory is assumed.},
booktitle = {Proceedings of the 1990 ACM Conference on LISP and Functional Programming},
pages = {61–78},
numpages = {18},
location = {Nice, France},
series = {LFP '90}
}

@inproceedings{Wad92,
author = {Wadler, Philip},
title = {The Essence of Functional Programming},
year = {1992},
isbn = {0897914538},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/143165.143169},
doi = {10.1145/143165.143169},
abstract = {This paper explores the use monads to structure functional
programs. No prior knowledge of monads or category theory is
required.Monads increase the ease with which programs may be modified.
They can mimic the effect of impure features such as exceptions,
state, and continuations; and also provide effects not easily
achieved with such features. The types of a program reflect which
effects occur.The first section is an extended example of the use of monads. A
simple interpreter is modified to support various extra features:
error messages, state, output, and non-deterministic choice. The
second section describes the relation between monads and the
continuation-passing style. The third section sketches how monads
are used in a compiler for Haskell that is written in Haskell.},
booktitle = {Proceedings of the 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
pages = {1–14},
numpages = {14},
location = {Albuquerque, New Mexico, USA},
series = {POPL '92}
}